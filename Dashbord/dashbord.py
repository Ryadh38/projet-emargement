import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Configuration de la page
st.set_page_config(
    page_title="Dashboard Projet d'√âmargement",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Sidebar navigation
st.sidebar.title("Navigation")
section = st.sidebar.radio("Aller √† :", [
    "Accueil",
    "D√©crochage scolaire",
    "Absent√©isme",
    "Corr√©lation pr√©sence/r√©ussite",
    "Clustering"
])

# Chargement des donn√©es
@st.cache_data
def load_data():
    stats = pd.read_csv("stats.csv")
    coeffs = pd.read_csv("coeffs_decrochage.csv", index_col=0).iloc[:, 0]
    importances = pd.read_csv("importances_rf.csv", index_col=0).iloc[:, 0]
    return stats, coeffs, importances

stats, coeffs, importances = load_data()
features = ['taux_presence', 'moyenne_cc', 'moyenne_exam', 'retard_moyen', 'nb_absences_injustifiees', 'distance_moyenne', 'connexion_moyenne', 'notif_moyenne']

# Accueil
if section == "Accueil":
    st.title("üìä Projet d'analyse pr√©dictive d'√©margement")
    st.markdown("""
    Bienvenue sur le tableau de bord interactif.
    
    **Objectifs :**
    - Pr√©dire le d√©crochage scolaire
    - Analyser l'absent√©isme
    - Comprendre les corr√©lations pr√©sence/r√©ussite
    - Optimiser les groupes d'√©tudiants
    """)

# D√©crochage scolaire
elif section == "D√©crochage scolaire":
    st.header("1Ô∏è‚É£ D√©crochage scolaire (R√©gression logistique)")
    st.bar_chart(coeffs.sort_values())
    with st.expander("üìù Interpr√©tation"):
        st.write("""
        **Analyse :**
        - Plus une variable a un coefficient √©lev√© (barre longue), plus elle influence fortement la probabilit√© de d√©crochage.
        - Les variables positives indiquent un effet positif sur le risque de d√©crochage (quand elles augmentent, le risque aussi).
        - Inversement, les variables n√©gatives prot√®gent contre le d√©crochage.
        - Exemple : Si le taux de pr√©sence a un coefficient n√©gatif, cela signifie que plus un √©tudiant est pr√©sent, moins il risque de d√©crocher.
        """)

# Absent√©isme
elif section == "Absent√©isme":
    st.header("2Ô∏è‚É£ Pr√©diction de l'absent√©isme (Random Forest)")
    st.bar_chart(importances.sort_values())
    with st.expander("üìù Interpr√©tation"):
        st.write("""
        **Analyse :**
        - Les variables les plus importantes sont celles qui expliquent le mieux l‚Äôabsent√©isme.
        - Exemple : Si la distance au domicile est tr√®s importante, cela signifie qu‚Äôelle joue un r√¥le cl√© dans l‚Äôabsence des √©tudiants.
        - Permet de cibler les actions de pr√©vention sur les facteurs identifi√©s comme les plus influents.
        """)

# Corr√©lation pr√©sence/r√©ussite
elif section == "Corr√©lation pr√©sence/r√©ussite":
    st.header("3Ô∏è‚É£ Corr√©lation entre taux de pr√©sence et r√©ussite acad√©mique")
    fig, ax = plt.subplots()
    scatter = ax.scatter(stats['taux_presence'], stats['moyenne_exam'], c=stats.get('groupe', 0), cmap='Set1', alpha=0.7)
    ax.set_xlabel("Taux de pr√©sence")
    ax.set_ylabel("Moyenne examen")
    ax.set_title("Pr√©sence vs. Moyenne d'examen")
    st.pyplot(fig)
    with st.expander("üìù Interpr√©tation"):
        st.write("""
        **Analyse de la corr√©lation :**
        - Si les points montent vers la droite, il y a une corr√©lation positive : plus un √©tudiant est pr√©sent, meilleure est sa note.
        - Les points group√©s en bas √† gauche indiquent des √©tudiants √† risque (faible pr√©sence, faibles notes).
        - Les couleurs par groupe permettent de voir si certains profils sont plus √† risque que d‚Äôautres.
        """)

# Clustering
elif section == "Clustering":
    st.header("4Ô∏è‚É£ Clustering des √©tudiants")
    if 'groupe' in stats.columns:
        st.subheader("R√©partition par groupe")
        st.bar_chart(stats['groupe'].value_counts())

        group_means = stats.groupby('groupe')[features].mean()
        st.subheader("Profil moyen (valeurs brutes)")
        st.dataframe(group_means)

        group_fmt = group_means.copy()
        group_fmt['taux_presence'] = (group_fmt['taux_presence'] * 100).round(1).astype(str) + '%'
        for col in features[1:]:
            group_fmt[col] = group_fmt[col].round(1)

        st.subheader("Profil moyen (format√©)")
        st.dataframe(group_fmt)

        st.subheader("Radar Chart comparatif")
        labels = group_means.columns.tolist()
        angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
        angles += angles[:1]
        fig_radar, ax_radar = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
        for grp, row in group_means.iterrows():
            vals = row.tolist() + [row.tolist()[0]]
            ax_radar.plot(angles, vals, label=f"Groupe {grp}")
            ax_radar.fill(angles, vals, alpha=0.15)
        ax_radar.set_thetagrids(np.degrees(angles[:-1]), labels)
        ax_radar.set_title("Radar Chart des groupes")
        ax_radar.legend()
        st.pyplot(fig_radar)

        with st.expander("üìù Analyse globale des groupes"):
            st.write("""
            **R√©sum√© :**
            - Groupe faible risque : forte pr√©sence, bonnes notes, peu d‚Äôabsences/retards.
            - Groupe interm√©diaire : moyenne pr√©sence/notes, quelques absences.
            - Groupe haut risque : faible pr√©sence, notes basses, beaucoup d‚Äôabsences.
            - Ces profils aident √† adapter les dispositifs d‚Äôaccompagnement.
            """)
    else:
        st.info("La colonne 'groupe' est manquante. Ex√©cute le script de clustering au pr√©alable.")

# Footer
st.markdown("---")
st.markdown("*Projet r√©alis√© par Ryadh38 ‚Äì 2024-2025*")
